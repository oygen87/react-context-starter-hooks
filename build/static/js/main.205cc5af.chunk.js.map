{"version":3,"sources":["store/MoneyContext.js","components/Header.js","pages/SecondPage.js","store/MoneyReducer.js","components/ControlPanel.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["MoneyContext","React","createContext","Header","props","react_default","a","createElement","title","SecondPage","moneyContext","useContext","className","components_Header","money","react_router_dom","to","ADD_ONE","ADD_TEN","ADD_CUSTOM","ControlPanel","onClick","dispatch","type","payload","Home","components_ControlPanel","App","initialState","action","setState","state","Object","objectSpread","MoneyReducer","_useState","useState","_useState2","slicedToArray","Provider","value","react_router","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.205cc5af.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const MoneyContext = React.createContext();\r\n","import React from \"react\";\r\n\r\nconst Header = props => {\r\n  return (\r\n    <div>\r\n      <h2>{props.title}</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useContext } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { MoneyContext } from \"../store/MoneyContext\";\r\nimport Header from \"../components/Header\";\r\n\r\nconst SecondPage = () => {\r\n  const moneyContext = useContext(MoneyContext);\r\n  return (\r\n    <div className=\"container\">\r\n      <Header title=\"Second Page\" />\r\n      <p>\r\n        Value from context : <h2>{moneyContext.money}</h2>\r\n      </p>\r\n      <NavLink to=\"/\">Back to home</NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SecondPage;\r\n","export const MoneyReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case ADD_ONE:\r\n      return { ...state, money: state.money + 1 };\r\n    case ADD_TEN:\r\n      return { ...state, money: state.money + 10 };\r\n    case ADD_CUSTOM:\r\n      return { ...state, money: state.money + action.payload };\r\n    default:\r\n      break;\r\n  }\r\n};\r\n\r\nexport const ADD_ONE = \"ADD_ONE\";\r\nexport const ADD_TEN = \"ADD_TEN\";\r\nexport const ADD_CUSTOM = \"ADD_CUSTOM\";\r\n","import React, { useContext } from \"react\";\r\nimport { MoneyContext } from \"../store/MoneyContext\";\r\nimport { ADD_CUSTOM, ADD_ONE, ADD_TEN } from \"../store/MoneyReducer\";\r\n\r\nconst ControlPanel = () => {\r\n  const moneyContext = useContext(MoneyContext);\r\n\r\n  const addOne = () => {\r\n    moneyContext.dispatch({ type: ADD_ONE });\r\n  };\r\n\r\n  const addTen = () => {\r\n    moneyContext.dispatch({ type: ADD_TEN });\r\n  };\r\n\r\n  const add777 = () => {\r\n    moneyContext.dispatch({ type: ADD_CUSTOM, payload: 777 });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button className=\"btn btn-success mr-3\" onClick={addOne}>\r\n        Add 1\r\n      </button>\r\n      <button className=\"btn btn-success mr-3\" onClick={addTen}>\r\n        Add 10\r\n      </button>\r\n      <button className=\"btn btn-success \" onClick={add777}>\r\n        Add 777\r\n      </button>\r\n      <h3>{moneyContext.money}</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ControlPanel;\r\n","import React from \"react\";\r\nimport Header from \"../components/Header\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport ControlPanel from \"../components/ControlPanel\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <Header title=\"Home Page\" />\r\n      <ControlPanel />\r\n      <NavLink to=\"/second\">Go To Second Page (React Router)</NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState } from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport \"./App.scss\";\nimport SecondPage from \"./pages/SecondPage\";\nimport Home from \"./pages/Home\";\nimport { MoneyContext } from \"./store/MoneyContext\";\nimport { MoneyReducer } from \"./store/MoneyReducer\";\n\nconst App = () => {\n  const initialState = {\n    money: 1337,\n    dispatch: action => {\n      setState(state => MoneyReducer(state, action));\n    }\n  };\n\n  const [state, setState] = useState(initialState);\n\n  return (\n    <MoneyContext.Provider value={state}>\n      <BrowserRouter>\n        <div className=\"App\">\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/second\" component={SecondPage} />\n        </div>\n      </BrowserRouter>\n    </MoneyContext.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}